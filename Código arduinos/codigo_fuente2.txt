#define SER 11   //Serial input
#define RCLK 12  //Register clock
#define SRCLK 13 //Shift register clock

#ifndef LIQUID_CRYSTAL_74HC595_H
#define LIQUID_CRYSTAL_74HC595_H

#define LCD_CLEARDISPLAY 0x01
#define LCD_RETURNHOME 0x02
#define LCD_ENTRYMODESET 0x04
#define LCD_DISPLAYCONTROL 0x08
#define LCD_CURSORSHIFT 0x10
#define LCD_FUNCTIONSET 0x20
#define LCD_SETCGRAMADDR 0x40
#define LCD_SETDDRAMADDR 0x80
#define LCD_ENTRYRIGHT 0x00
#define LCD_ENTRYLEFT 0x02
#define LCD_ENTRYSHIFTINCREMENT 0x01
#define LCD_ENTRYSHIFTDECREMENT 0x00
#define LCD_DISPLAYON 0x04
#define LCD_DISPLAYOFF 0x00
#define LCD_CURSORON 0x02
#define LCD_CURSOROFF 0x00
#define LCD_BLINKON 0x01
#define LCD_BLINKOFF 0x00
#define LCD_DISPLAYMOVE 0x08
#define LCD_CURSORMOVE 0x00
#define LCD_MOVERIGHT 0x04
#define LCD_MOVELEFT 0x00
#define LCD_8BITMODE 0x10
#define LCD_4BITMODE 0x00
#define LCD_2LINE 0x08
#define LCD_1LINE 0x00
#define LCD_5x10DOTS 0x04
#define LCD_5x8DOTS 0x00

class LiquidCrystal_74HC595 : public Print {
    public:
        LiquidCrystal_74HC595(uint8_t ds, uint8_t shcp, uint8_t stcp,
                uint8_t rs, uint8_t e, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3);
        void begin(uint8_t cols, uint8_t rows, uint8_t charsize = LCD_5x8DOTS);
        void clear();
        void setCursor(uint8_t col, uint8_t row);
        void command(uint8_t value);
        virtual size_t write(uint8_t value);
        using Print::write;
    private:
        void send(uint8_t value, uint8_t mode);
        void pulseEnable();
        void write4bits(uint8_t value);
        void transfer();
        uint8_t _ds;
        uint8_t _shcp;
        uint8_t _stcp;
        uint8_t _rs;
        uint8_t _e;
        uint8_t _d0;
        uint8_t _d1;
        uint8_t _d2;
        uint8_t _d3;
        uint8_t _cols;
        uint8_t _rows;
        uint8_t _displayControl;
        uint8_t _displayMode;
        uint8_t _register;
};

#endif



LiquidCrystal_74HC595::LiquidCrystal_74HC595(uint8_t ds, uint8_t shcp, uint8_t stcp,
        uint8_t rs, uint8_t e, uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3) {
    _ds = ds;
    _shcp = shcp;
    _stcp = stcp;
    _rs = rs;
    _e = e;
    _d0 = d0;
    _d1 = d1;
    _d2 = d2;
    _d3 = d3;

    pinMode(_ds, OUTPUT);
    pinMode(_shcp, OUTPUT);
    pinMode(_stcp, OUTPUT);
}

void LiquidCrystal_74HC595::begin(uint8_t cols, uint8_t rows, uint8_t charsize) {
    _cols = cols;
    _rows = rows;
    _displayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    _displayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;

    delayMicroseconds(50000);
    write4bits(0x03);
    delayMicroseconds(4500);
    write4bits(0x03);
    delayMicroseconds(4500);
    write4bits(0x03);
    delayMicroseconds(150);
    write4bits(0x02);

    if (_rows > 1) {
        command(LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
    } else if (_rows == 1 && charsize != 0) {
        command(LCD_FUNCTIONSET | LCD_4BITMODE | LCD_1LINE | LCD_5x10DOTS);
    } else {
        command(LCD_FUNCTIONSET | LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS);
    }

    command(LCD_DISPLAYCONTROL | _displayControl);
    clear();
    command(LCD_ENTRYMODESET | _displayMode);
}

void LiquidCrystal_74HC595::clear() {
    command(LCD_CLEARDISPLAY);
    delayMicroseconds(2000);
}


inline void LiquidCrystal_74HC595::command(uint8_t value) {
    send(value, 0);
}

inline size_t LiquidCrystal_74HC595::write(uint8_t value) {
    send(value, 1);
    return 1;
}

void LiquidCrystal_74HC595::send(uint8_t value, uint8_t mode) {
    bitWrite(_register, _rs, mode);
    transfer();
    write4bits(value >> 4);
    write4bits(value);
}

void LiquidCrystal_74HC595::pulseEnable() {
    bitWrite(_register, _e, 0);
    transfer();
    delayMicroseconds(1);
    bitWrite(_register, _e, 1);
    transfer();
    delayMicroseconds(1);
    bitWrite(_register, _e, 0);
    transfer();
    delayMicroseconds(50);
}

void LiquidCrystal_74HC595::write4bits(uint8_t value) {
    bitWrite(_register, _d0, (value >> 0) & 1);
    bitWrite(_register, _d1, (value >> 1) & 1);
    bitWrite(_register, _d2, (value >> 2) & 1);
    bitWrite(_register, _d3, (value >> 3) & 1);
    transfer();
    pulseEnable();
}

void LiquidCrystal_74HC595::transfer() {
    digitalWrite(_stcp, LOW);
    shiftOut(_ds, _shcp, MSBFIRST, _register);
    digitalWrite(_stcp, HIGH);
}


LiquidCrystal_74HC595 lcd(11, 13, 12, 1, 3, 4, 5, 6, 7);
  
int i=0,I=0,clave=0,arrayNum[12];
byte array[8];
bool flag=true;
void setup()
{
  Serial.begin(9600);
  for(short int i=2;i<10;i++)
  	pinMode(i,INPUT);
  pinMode(SER, OUTPUT);
  pinMode(RCLK, OUTPUT);
  pinMode(SRCLK, OUTPUT);
  
}

void loop()
{
  if(Serial.available()){  
    Serial.readBytes(array,8);
    i=0;
    flag=true;
    
    //CONSTANTE
    digitalWrite(RCLK,LOW);
    shiftOut( SER, SRCLK, MSBFIRST, 19);
    digitalWrite(RCLK,HIGH);
    delay(10);
      
    for(short int it=2;it<10;it++)
      if(array[it-2]!=digitalRead(it)){
        flag=false;
        break;
      }
    
    if(flag==true){
      clave++;
      if(clave==19){      
        Serial.write(true);
        lcd.begin(16, 2);
        lcd.print(arrayNum[0]);
        delay(950);
        lcd.clear();      
        lcd.print(arrayNum[1]);
        delay(950);
        lcd.clear();
        clave=0;
      }
    }
   	I++;
    if(I==12){
      for(int j=0;j<11;j++)
        arrayNum[j]=arrayNum[j+1];
      I--;
    }
    arrayNum[I]=ToInt(array);
     
  }
}

int ToInt(byte array[]){
  int entero=0;
  for(short int i=7,I=0;i>=0;i--,I++){  
    if(int(array[i])==1)
      entero+=Pow(2,I);
  }
  return entero;
}

int Pow(int numero,int exponente){
  int numeroBase=numero;
  if(exponente==0)return 1;
  for(int i=1;i<exponente;i++)
    numero*=numeroBase;
  return numero;
}

